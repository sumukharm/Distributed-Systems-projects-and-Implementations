import sys
import glob
import os
import time
from random import randint
TIMEOUT = 10


class Proposer(process):
	def setup(acceptors:set):
		self.n = None              # proposal number
		self.majority = acceptors  # majority of acceptors; all in other papers

	def to_consent():
		tp=float(sys.argv[8]) if len(sys.argv)>8 else 1
		mlossrate= float(sys.argv[5]) if len(sys.argv)> 5 else 0
		n = (0, self) if n == None else (n[0]+1, self)  # pick a prop num
		msg_delay=float(sys.argv[6]) if len(sys.argv)>6 else 0
		print(msg_delay)
		
	
		#message loss rate
		if randint(1,100)<=int((1-mlossrate)*100):
			print("prepare {} proposal message sent".format(n))
			time.sleep(msg_delay)
			send(('prepare', n), to= majority)
		else:
			print("prepare {} proposal message lost in the channel".format(n))
		
	
		if await(len(setof(a, received(('respond', _n, _), from_ =a))) > len(acceptors)/2):
			v = anyof(setof(v, received(('respond', _n, (n2, v))), n2==max(setof(n2, received(('respond', _n, (n2, _)))))) or {randint(1,100)})  # any value, pick in 1..100
			
			responded = setof(a, received(('respond', _n, _), from_ =a))
			msg_delay=float(sys.argv[6]) if len(sys.argv)>6 else 0
			print(msg_delay)
			
			#message loss rate
			if randint(1,100)<=int((1-mlossrate)*100):
				print("acceptance request {} <> {} sent".format(n,v))
				time.sleep(msg_delay)
				send(('accept', n, v), to= responded)
			else:
				print("acceptance request {} <> {} lost in the channel".format(n,v))
		
			debug('### chose', n, v)
	
		elif await(len(setof(a, received(('preempt', _n), from_ =a))) > len(acceptors)/2):
			output('received preempt, and discontinuing proposal ',n)

		elif timeout(tp):
			output('failed proposal number', n)

	def run():
		wtime= float(sys.argv[7]) if len(sys.argv)>7 else 0
		while not received(('done',)):
			time.sleep(wtime)
			to_consent()
		output('terminating')

	def anyof(s):
		return next(iter(s)) if s else None

class Acceptor(process):
	def setup(learners:set): pass

	def receive(msg= ('prepare', n), from_= p):
		mlossrate= float(sys.argv[5]) if len(sys.argv)> 5 else 0	
		if each(sent(('respond', n2, _)), has= n > n2):
			maxprop = anyof(setof((n, v), sent(('accepted', n, v)),n==max(setof(n, sent(('accepted', n, _))))))
			msg_delay=float(sys.argv[6]) if len(sys.argv)>6 else 0
			print(msg_delay)
			
			#message loss
			if randint(1,100)<=int((1-mlossrate)*100):
				print("respond message {} sent".format(n))
				time.sleep(msg_delay)
				send(('respond', n, maxprop), to =p)
			else:
				print("respond message {} lost in the channel".format(n))

		else:
			output('sending preempt to ',p,n)
			msg_delay=float(sys.argv[6]) if len(sys.argv)>6 else 0
			print(msg_delay)
		
			#messageloss		
			if randint(1,100)<=int((1-mlossrate)*100):
				print("Preempt message {} sent".format(n))
				time.sleep(msg_delay)
				send(('preempt',n),to=p)
			else:
				print("Preempt message {} lost in the channel".format(n))


	def receive(msg= ('accept', n, v)):
		mlossrate= float(sys.argv[5]) if len(sys.argv)> 5 else 0
		if not some(sent(('respond', n2, _)), has= n2 > n):
			msg_delay=float(sys.argv[6]) if len(sys.argv)>6 else 0
			print(msg_delay)
			
			#messageloss
			if randint(1,100)<=int((1-mlossrate)*100):
				print("accepted message {} <> {}  sent".format(n,v))
				time.sleep(msg_delay)
				send(('accepted', n, v), to= learners)
			else:
				print("accepted message {} <> {}  lost in the channel".format(n,v))


	def run():
		await(received(('done',)))
		output('terminating')

	def anyof(s):
		"""return any element of set s if s is not empty or 'None' otherwise"""
		return next(iter(s)) if s else None

class Learner(process):
	def setup(acceptors:set): pass
	
	def learn():
		tl=float(sys.argv[9]) if len(sys.argv)>9 else 10
		if await(some(received(('accepted', n, v)),has= len(setof(a, received(('accepted', _n, _v), from_=a)))> len(acceptors)/2)):
			output('learned', n, v)
			#CORRECTNESS VERIFICATION OF SAFETY AND LIVENESS, AFTER TERMINATING, ONLY ONE NAME SHOULD BE TOUCHED
			f=open("System_Learns_Number_{0}_Proposer{1}_value_{2}".format(n[0],n[1],v),"w")
			f.close()

		elif timeout(tl):
			output('failed learning anything')

	def run():
		mlossrate= float(sys.argv[5]) if len(sys.argv)> 5 else 0	
		learn()
		output('terminating')
		msg_delay=float(sys.argv[6]) if len(sys.argv)>6 else 0
		print(msg_delay)
		
		#messageloss
		if randint(1,100)<=int((1-mlossrate)*100):	
			print("learned message sent")
			time.sleep(msg_delay)
			send(('learned', ), to=nodeof(self))
		else:
			print("learned message lost")

def main():

	nproposers = int(sys.argv[1]) if len(sys.argv) > 2 else 5
	nacceptors = int(sys.argv[2]) if len(sys.argv) > 1 else 3	
	nlearners = int(sys.argv[3]) if len(sys.argv) > 3 else 3
	nrepetitions= int(sys.argv[4]) if len(sys.argv) > 4 else 1
	mlossrate= float(sys.argv[5]) if len(sys.argv)> 5 else 0
	msg_delay=float(sys.argv[6]) if len(sys.argv)>6 else 0
	wtime= float(sys.argv[7]) if len(sys.argv)>7 else 0
	tp= float(sys.argv[8]) if len(sys.argv)>8 else 0
	tl= float(sys.argv[9]) if len(sys.argv)>9 else 0


	log_file="log_file_run_{}_{}_{}_{}_{}_{}_{}_{}_{}".format(nproposers,nacceptors , nlearners, nrepetitions, mlossrate, msg_delay, wtime, tp, tl)

	f=open(log_file,"w")

	for runs in range(1,nrepetitions+1):

		start_time=time.time()	
		start_cpu_time=time.clock()
		acceptors = new(Acceptor, num= nacceptors)
		proposers = new(Proposer, (acceptors,), num= nproposers)
		learners = new(Learner, (acceptors,), num= nlearners)
		for p in acceptors: setup(p, (learners,))
		start(acceptors | proposers | learners)

		await(each(l in learners, has=received(('learned',), from_=l)))
		output('done')
		print(msg_delay)
		time.sleep(msg_delay)	
	
		#messageloss
		#while 1:
			#if randint(1,100)<=int((1-mlossrate)*100):
				#print("Done message sent successfully")
		send(('done',), to= (acceptors|proposers))
				#break
			#else:
				#print("Done message lost in the channel, retrying...............................................")

		print("\nCorrectness Verification\n")
		file_list=glob.glob("System_Learns*")
		print(file_list)
		end_time=time.time()
		end_cpu_time=time.clock()


		if len(file_list)==1 :
			#sum_time=sum_time+(end_time-start_time)
			#sum_cpu_time=sum_cpu_time+(end_cpu_time-start_cpu_time)
			#count=count+1
			f.write("\nRUN {} - CORRECTNESS VERIFICATION PASSED AS ONLY ONE(safety)/ATLEAST ONE(LIVENESS) VALUE {} WAS CHOSEN".format(runs, file_list[0]) + "\nTIME TO LEARN with messageloss={},msgdelay={},waittime={} ----> Easpsed time {}, CPU TIME {}\n".format(mlossrate,msg_delay,wtime, end_time-start_time,end_cpu_time-start_cpu_time))
	
		else:
			f.write("\nRUN {} - CORRECTNESS VERIFICATION PRESERVED AS SAFETY ISN'T VIOLATED, THOUGH IT FAILED TO CHOOSE ANY VALUE, GIVEN mloss={}, msgdelay={},wtime={}".format(runs,mlossrate,msg_delay,wtime) + "\nTIME TO TERMINATE : elapsed time {}, cputime\n".format(end_time-start_time,end_cpu_time-start_cpu_time))

	
		for str in file_list:
			os.remove(str)

		
	

	f.close()
		






# This is an executable specification of the algorithm described in
# Lamport, L. (2001).  Paxos Made Simple.  ACM SIGACT News 
# (Distributed Computing Column), 32(4):51-58, December.

# This code includes setup and termination for running repeated rounds until
# the learners all terminate after learning the consent value or timeout.

