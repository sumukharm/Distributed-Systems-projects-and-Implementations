import sys
import glob
import os
from random import randint
TIMEOUT = 1

#f=open("corectness_testing_without_preemp.txt","w")
learned_values=[]

class Proposer(process):
	def setup(acceptors:set):
		self.n = None              # proposal number
		self.majority = acceptors  # majority of acceptors; all in other papers

	def to_consent():
		n = (0, self) if n == None else (n[0]+1, self)  # pick a prop num
		send(('prepare', n), to= majority)
		
		if await(len(setof(a, received(('respond', _n, _), from_ =a))) > len(acceptors)/2):
			v = anyof(setof(v, received(('respond', _n, (n2, v))), n2==max(setof(n2, received(('respond', _n, (n2, _)))))) or {randint(1,100)})  # any value, pick in 1..100
			
			responded = setof(a, received(('respond', _n, _), from_ =a))
			send(('accept', n, v), to= responded)
			debug('### chose', n, v)
	
		#elif receipt of preempt
		#break

		elif timeout(TIMEOUT):
			output('failed proposal number', n)

	def run():
		while not received(('done',)):
			to_consent()
		output('terminating')

	def anyof(s):
		return next(iter(s)) if s else None

class Acceptor(process):
	def setup(learners:set): pass

	def receive(msg= ('prepare', n), from_= p):
		if each(sent(('respond', n2, _)), has= n > n2):
			maxprop = anyof(setof((n, v), sent(('accepted', n, v)),n==max(setof(n, sent(('accepted', n, _))))))
			send(('respond', n, maxprop), to =p)

	def receive(msg= ('accept', n, v)):
		if not some(sent(('respond', n2, _)), has= n2 > n):
			send(('accepted', n, v), to= learners)

		else:
			#send preempt message
			pass		

	def run():
		await(received(('done',)))
		output('terminating')

	def anyof(s):
		"""return any element of set s if s is not empty or 'None' otherwise"""
		return next(iter(s)) if s else None

class Learner(process):
	def setup(acceptors:set): pass
	
	def learn():
		if await(some(received(('accepted', n, v)),has= len(setof(a, received(('accepted', _n, _v), from_=a)))> len(acceptors)/2)):
			output('learned', n, v)
			f=open("System_Learns_Number_{0}_Proposer{1}_value_{2}".format(n[0],n[1],v),"w")
			f.close()

		elif timeout(TIMEOUT * 10):
			output('failed learning anything')

	def run():
		learn()
		output('terminating')
		send(('learned', ), to=nodeof(self))

def main():

	nacceptors = int(sys.argv[2]) if len(sys.argv) > 1 else 3
	nproposers = int(sys.argv[1]) if len(sys.argv) > 2 else 5
	nlearners = int(sys.argv[3]) if len(sys.argv) > 3 else 3
	nrepetitions= int(sys.argv[4]) if len(sys.argv) > 4 else 1
	mlossrate= int(sys.argv[5]) if len(sys.argv)> 5 else 0
	mdelay=int(sys.argv[6]) if len(sys.argv)>6 else 0
	wtime= int(sys.argv[7]) if len(sys.argv)>7 else 0
	tp= int(sys.argv[8]) if len(sys.argv)>8 else 0
	tl= int(sys.argv[9]) if len(sys.argv)>9 else 0
	
	acceptors = new(Acceptor, num= nacceptors)
	proposers = new(Proposer, (acceptors,), num= nproposers)
	learners = new(Learner, (acceptors,), num= nlearners)
	for p in acceptors: setup(p, (learners,))
	start(acceptors | proposers | learners)

	await(each(l in learners, has=received(('learned',), from_=l)))
	output('done')
	send(('done',), to= (acceptors|proposers))
	
	print("\nCorrectness Verification\n")
	file_list=glob.glob("System_Learns*")
	print(file_list)
	if len(file_list)==1 :
		print("CORRECTNESS VERIFICATION PASSED as only one value {0} was chosen".format(file_list[0])) 
	else:
		print("CORRECTNESS VERIFICATION FAILED")

	for str in file_list:
		os.remove(str)


# This is an executable specification of the algorithm described in
# Lamport, L. (2001).  Paxos Made Simple.  ACM SIGACT News 
# (Distributed Computing Column), 32(4):51-58, December.

# This code includes setup and termination for running repeated rounds until
# the learners all terminate after learning the consent value or timeout.

