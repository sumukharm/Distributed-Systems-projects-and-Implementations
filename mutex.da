import sys
config(channel is fifo, clock is lamport)

class P(process):
	def setup(s:set, nrequests:int):
		self.q=set()

	def request_resource(task):
		print(self," requesting resources")
		c = logical_clock()
		send(('request', c, self), to= s)
		q.add(('request', c, self))
		return c

	def release_resource(task,c):
		print(self," releasing resources")
		q.remove(('request', c, self))
		send(('release', logical_clock(), self), to= s)

	def mutex(task,c):
		print(self," process printing its queue ",self.q)	#to see what causes safety violation from q's point
		await(each(('request', c2, p) in q, has= (c2, p)==(c, self) or (c, self) < (c2, p)) and each(p in s, has= some(received(('ack', c2, _p)), has= c2 > c)))

		-- critical_section
		task()
		-- release

	def receive(msg= ('request', c2, p)):
		print(self," receiving request call from ",p)
		q.add(('request', c2, p))
		send(('ack', logical_clock(), self), to= p)

	def receive(msg= ('release', _, p)):
		print(self," receiving release call from ",p)
		for x in setof(('request', c, p), ('request', c, _p) in q):
			q.remove(x)
			break
	
	def run():
		def task():
			output('in cs')
		
		l_clocks=[]			#list to hold the order of logical_clocks of request
		for i in range(nrequests):
			c=request_resource(task)
			l_clocks.append(c)	

		for i in range(nrequests):
			c=l_clocks.pop(0)	#clear the cock values as and when a process finishes mutex and release
			mutex(task,c)
			release_resource(task,c)

		send(('done', self), to= parent())
		await(received(('done',), from_=parent()))
		output('terminating')

def main():
	nprocs=int(sys.argv[1]) if len(sys.argv)>1 else 10
	nrequests=int(sys.argv[2]) if len(sys.argv)>2 else 1
	
	ps=new(P,num=nprocs)
	for p in ps: setup(p, (ps-{p}, nrequests))
	
	start(ps)
	await(each(p in ps, has=received(('done', p))))
	send(('done',), to=ps)
